name: CI - Build and Push Docker Image

# 파이프라인 실행 조건
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# 환경 변수
env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: 코드 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Java 17 설치
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Gradle 빌드 캐싱 설정
      - name: Cache Gradle Packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: 리포지토리 이름을 소문자로 변환하여 환경 변수로 설정
      - name: Set Lowercase Image Name
        run: |
          echo "IMAGE_NAME=${OWNER,,}/${REPO,,}" >> ${GITHUB_ENV}
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}

      # Step 5: Gradle 빌드 수행을 위한 권한 설정
      - name: Grant Execute Permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build Java Application
        run: ./gradlew clean build -x test  # 테스트는 제외한 빌드

      # Step 6: Docker 로그인 설정
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Docker 메타데이터 설정
      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Step 8: Docker 이미지 빌드 및 GitHub Packages로 푸시
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./App.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: ${{ steps.meta.outputs.labels }}