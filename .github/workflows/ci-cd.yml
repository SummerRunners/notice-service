name: SRUNNERS-NOTICE CI/CD Pipeline

# 파이프라인 실행 조건 (main 브랜치 푸시 또는 PR 생성 시 실행)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# 환경 변수 정의
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Job 정의
jobs:
  # 1. Build Job: Gradle 빌드
  build:
    runs-on: ubuntu-22.04
    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle Wrapper에 실행 권한 추가
      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      # 4. Gradle 의존성 캐싱
      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 5. Gradle 빌드 수행
      - name: Build using Gradle
        run: ./gradlew clean build -x test # 테스트 제외하고 빌드

#  # 2. Test Job: Gradle 테스트 실행
#  test:
#    runs-on: ubuntu-22.04
#    needs: build
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # Gradle Wrapper에 실행 권한 추가
#      - name: Grant execute permission to Gradle Wrapper
#        run: chmod +x ./gradlew
#
#      - name: Run Tests
#        run: ./gradlew test # Gradle 테스트 실행

  # 3. Deploy Job: Docker 이미지 빌드 및 GitHub Packages에 게시
  deploy:
    runs-on: ubuntu-22.04
    needs: test
    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. GitHub Packages에 로그인
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Docker 메타데이터 추출 (태그와 라벨 설정)
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # 4. Docker 이미지 빌드 및 GitHub Packages로 푸시
      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}