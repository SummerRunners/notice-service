#name: SRUNNERS-NOTICE CI/CD Pipeline
#
## 파이프라인 트리거 조건을 설정합니다.
#on:
#  push:
#    branches:
#      - main # main 브랜치에 푸시될 때 실행
#  pull_request:
#    branches:
#      - main # main 브랜치로의 PR 생성 시 실행
#
## Job 정의
#jobs:
#  # 1. Gradle Build and Test Job
#  build:
#    runs-on: ubuntu-22.04
#    steps:
#      # - Checkout the repository
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      # - Setup JDK 17
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # - Cache Gradle dependencies
#      - name: Cache Gradle Dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      # - Run Gradle Build
#      - name: Build using Gradle
#        run: ./gradlew clean build -x test # 테스트 제외하고 빌드
#
#  # 2. Tests Job
#  test:
#    runs-on: ubuntu-22.04
#    needs: build
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Run Tests
#        run: ./gradlew test
#
#  # 3. Docker Image Build & Push to Docker Hub
#  deploy:
#    runs-on: ubuntu-22.04
#    needs: test
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build and Push Docker Image
#        run: |
#          docker build -t my-dockerhub-username/springboot-app:${{ github.sha }} .
#          docker push my-dockerhub-username/springboot-app:${{ github.sha }}