name: SRUNNERS-NOTICE CI/CD Pipeline

# 파이프라인 실행 조건 (main 브랜치 푸시 또는 PR 생성 시 실행)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# 환경 변수 정의
env:
  REGISTRY: ghcr.io

# Job 정의
jobs:
  build-and-push-image:
    runs-on: ubuntu-22.04
    permissions:
      packages: write  # GitHub Packages에 이미지 푸시 권한 부여
      contents: read   # 기본 리포지토리 내용 읽기 권한

    steps:
      # Step 1: 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Java 17 설치
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # OpenJDK 배포판
          java-version: '17'

      # Step 3: Gradle 빌드 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: 리포지토리 이름을 소문자로 변환하여 환경 변수로 설정
      - name: Set lowercase image name
        run: |
          echo "IMAGE_NAME=${OWNER,,}/${REPO,,}" >> ${GITHUB_ENV}
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}

      # Step 5: Gradle 빌드 수행을 위한 권한 설정
      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      # Step 6: Gradle 빌드 수행
      - name: Build Java Application
        run: ./gradlew clean build -x test # 테스트 제외하고 빌드 수행

      # Step 7: GitHub Packages에 로그인
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Docker 메타데이터 추출 (태그와 라벨 설정)
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Step 9: Docker 이미지 빌드 및 GitHub Packages로 푸시
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./App.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: ${{ steps.meta.outputs.labels }}

      # Step 10: GCP VM에 배포
      - name: Deploy to GCP VM via SSH Action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_HOST }}              # GCP VM 외부 IP
          username: ${{ secrets.GCP_USERNAME }}      # GCP VM 사용자 이름
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}    # GCP VM의 SSH 개인 키
          passphrase: ${{ secrets.GCP_USERNAME }}    # SSH 키 패스프레이즈 (없으면 비워둠)
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker stop notice-service || true
            docker rm notice-service || true
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker run -d --name notice-service -p 80:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest